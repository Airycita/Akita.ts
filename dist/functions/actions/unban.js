"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.data=void 0;const builder_1=require("../../classes/builder"),utils_1=require("../../classes/utils");exports.data={data:(new builder_1.FunctionBuilder).setName("unban").setValue("description","unbans a user").setValue("use","$unban[user;reason?;guild?]").setValue("fields",[{name:"user",description:"the user Id that will be unbanned",type:"snowflake<user>"},{name:"reason",description:'the "why" will be unbanned `(default: none)`',type:"string",optional:!0},{name:"guild",description:"the guild Id where this action will take place `(defalut: ?ContextGuildId)`",type:"snowflake<guild>",optional:!0}]).setValue("example","$unban[772558414605844480;cuz is so hot]").setValue("returns","Boolean"),code:async t=>{await t.func.resolve_fields(t);let[a,e,l=t.metadata.ctx.getGuild()?.id]=t.interpreter.fields(t);var s=t.client.guilds.cache.get(l);return s?(s=await s.bans.remove(a,e).catch(e=>(utils_1.Utils.Warn(`failed to unban ${a.bgYellow} because `+(e?.message?.bgYellow||e),t),!1)),{code:t.code.replace(t.func.id,s?"true":"false")}):utils_1.Utils.Warn("invalid guild id provided",t,!0)}};