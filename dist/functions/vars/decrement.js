"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.data=void 0;const builder_1=require("../../classes/builder"),lodash_1=require("lodash");exports.data={data:(new builder_1.FunctionBuilder).setName("decrement").setValue("description","decrements a numeric variable by 1").setValue("use","$decrement[key;type?]").setValue("fields",[{name:"key",type:"string<variable>"},{name:"type",type:'"prefix" | "postfix"',optional:!0}]).setValue("example","$var[a;4] $var[b;8]\n$decrement[a] // decrements and return 3\n$increment[b;postfix] // decrements and return 8").setValue("returns","Number"),code:async function(){await this.resolveFields();var[e,t="prefix"]=this.fields.split(!0),r=await(0,lodash_1.get)(this.meta.vars,e);return(0,lodash_1.isNumber)(r)||this.warn(`variable ${e.bgYellow} is not numeric`),"prefix"!==(t=(0,lodash_1.toLower)(t))&&"postfix"!==t&&this.warn("invalid type provided"),(0,lodash_1.set)(this.meta.vars,e,--r),this.makeReturn("prefix"===t?r:1+r)}};