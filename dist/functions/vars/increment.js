"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.data=void 0;const tslib_1=require("tslib"),builder_1=require("../../classes/builder"),utils_1=require("../../classes/utils"),lodash_1=tslib_1.__importDefault(require("lodash"));exports.data={data:(new builder_1.FunctionBuilder).setName("increment").setValue("description","increments a numeric variable by 1").setValue("use","$increment[key;type?]").setValue("fields",[{name:"key",type:"string<variable>"},{name:"type",type:'"prefix" | "postfix"',optional:!0}]).setValue("example","$var[index;4] $var[xedni;8]\n$increment[index] // increments and return 5\n$increment[xedni;postfix] // increments and return 8").setValue("returns","Number"),code:async e=>{await e.func.resolve_fields(e);var[t,i="prefix"]=e.interpreter.fields(e),r=lodash_1.default.get(e.metadata.vars,t);return["bigint","number"].includes(typeof r)?["prefix","postfix"].includes(i)?(lodash_1.default.set(e.metadata.vars,t,++r),{code:e.code?.replace(e.func.id,"prefix"==lodash_1.default.toLower(i)?r:--r)}):utils_1.Utils.Warn("invalid type",e):utils_1.Utils.Warn(`variable ${t.bgYellow} is not numeric`,e)}};