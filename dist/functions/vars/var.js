"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.data=void 0;const tslib_1=require("tslib"),builder_1=require("../../classes/builder"),utils_1=require("../../classes/utils"),hjson_1=tslib_1.__importDefault(require("hjson"));exports.data={data:(new builder_1.FunctionBuilder).setName("var").setValue("description","add or get a variable").setValue("use","$var[key;value?;type?]").setValue("fields",[{name:"key",description:"property to get/set",type:"string"},{name:"value",description:"the value to be given to the variable",type:"any"},{name:"type",description:"the variable force type `(default: unknown)`",type:'"unknown" | "string" | "number" | "bigint" | "regexp" | "json"'}]).setValue("example",'$var[str;hi, im a string] // string var\n$var[num;4] // number var\n$var[obj;{ "leif": "erikson" }] // object var').setValue("returns","String"),code:async function(){await this.resolveFields();let e=this.fields.split(!0),[t,i,s="unknown"]=e;if(t.startsWith("invoke:"))return i=await utils_1.Utils.Invoke(this,t,e.slice(1),this.data.metadata.vars),this.makeReturn(i);if(i){if("number"==(s=s.toLowerCase())||"string"!=s&&"bigint"!=s&&!isNaN(i))i=Number(i);else if("bigint"==s||"string"!=s&&"number"!=s&&!isNaN(i))i=BigInt(i);else if("regexp"==s||"string"!=s&&["unknown","regexp"].includes(s)&&/\/(.*?)\/(.+|)/g.test(i)){var r=i.split("/");i=new RegExp(r[1],r[2])}else if(["json","unknown"].includes(s))try{i=hjson_1.default.parse(i)}catch(e){if("json"==s)return this.warn("Invalid JSON provided")}this.setVariable(t,i)}return this.makeReturn(this.variable(t))}};